
import test_page;
import defs;
import shuffle;
import instructions;
import test_page;
import output;

// Reads the data stored inside the test page to gather the output for the
// current trial.
TestOutput obtain_output()
{
    TestOutput out;

    out.n               = test_page.item.n;
    out.sequence        = test_page.recall_response.desired_value;
    out.recalled        = test_page.recall_response.entered_value;
    out.recall_correct  = test_page.recall_response.correct;
    out.recall_rt       = test_page.recall_response.rt;

    out.op1 = test_page.operation_response.op1;
    out.op2 = test_page.operation_response.op2;
    out.op3 = test_page.operation_response.op3;
    out.op4 = test_page.operation_response.op4;
    out.op5 = test_page.operation_response.op5;
    out.op6 = test_page.operation_response.op6;
    out.op7 = test_page.operation_response.op7;
    out.op8 = test_page.operation_response.op8;
    out.op9 = test_page.operation_response.op9;
    out.op10= test_page.operation_response.op10;

    return out;
}

Block task
{
    on_event:entry()
    {
        if (SHUFFLE_PRAC_ITEMS)
        {
            if (shuffle_test_items(prac_items) != OK)
                terminate;
        }
        if (SHUFFLE_TEST_ITEMS)
        {
            if (shuffle_test_items(test_items) != OK)
                terminate;
        }
    }

    Part 
    {
        on_event:entry()
        {
            blank_page.action_auto(this, BLANK_DURATION);
        }
    }

    Part practice_instructions
    {
        on_event:entry()
        {
            pause_page.set_text(PRAC_INSTRUCTION, true);
            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Part 
    {
        on_event:entry()
        {
            blank_page.action_auto(this, BLANK_DURATION);
        }
    }

    Block practice
    {
        on_event:entry()
        {
            test_page.setup(-1, DISPLAY_FEEDBACK);
            num_cycles = prac_items.size;
        }

        on_event:exit()
        {
            save_prac_output();
        }

        Trial
        {
            on_event:entry()
            {
                TestItem item = prac_items[practice.cycle];
                test_page.action(this, item, reference_time);
            }

            on_event:exit()
            {
                TestOutput out = obtain_output();
                output_append(prac_output, out);
            }
        }
    }

    Part 
    {
        on_event:entry()
        {
            blank_page.action_auto(this, BLANK_DURATION);
        }
    }
    
    Part test_instructions
    {
        on_event:entry()
        {
            pause_page.set_text(TEST_INSTRUCTION, true);
            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }
    
    Part 
    {
        on_event:entry()
        {
            blank_page.action_auto(this, BLANK_DURATION);
        }
    }

    Block test
    {
        on_event:entry()
        {
            test_page.setup(-1, DISPLAY_FEEDBACK);
            num_cycles = test_items.size;
        }

        on_event:exit()
        {
            save_test_output();
        }
        
        Trial
        {
            on_event:entry()
            {
                TestItem item = test_items[test.cycle];
                test_page.action(this, item, reference_time);
            }

            on_event:exit()
            {
                TestOutput out = obtain_output();
                output_append(test_output, out);
            }
        }
    }

    Part 
    {
        on_event:entry()
        {
            blank_page.action_auto(this, BLANK_DURATION);
        }
    }
}

void action (Part caller)
{
    // The test block needs to notify the caller when it is ready.
    task.enter(caller);
}

