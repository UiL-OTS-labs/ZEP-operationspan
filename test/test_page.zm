/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     Chris van Run

DESCRIPTION:

Provides a page object to show to the participant during test phase trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-03-20 TV   Created.
2014-05-26 CvR	Adapated.
2019-03-28 MD   Adapted.

\******************************************************************************/

import std_sound_output_device;
import defs;


Page test_page
{
    TestItem    item;               // Trial control parameters.
	int digit_nr  = 0;

    string[..] current_digits;      // Digits in order of current trial.
    string current_operation;       // The current operation.
    bool   current_operation_correct; // Whether or not the current op is correct


    void prepare_digits()
    {
        digit_nr = 0;
        g_digits.shuffle(0, -1);
        current_digits.size = item.n;
        int i = 0;
        while (i < current_digits.size)
        {
            current_digits[i] = g_digits[i];
            i++;
        }
    }

    string presented_digits()
    {
        int    i    = 0;
        string out  = "";
        while (i < item.n)
        {
            out += current_digits[i];
            i++;
        }

        return out;
    }

    void get_operation()
    {
        if (digit_nr == 0) {
            current_operation = item.op1;
            current_operation_correct = item.ans1;
        }
        else if (digit_nr == 1) {
            current_operation= item.op2;
            current_operation_correct = item.ans2;
        }
        else if (digit_nr == 2) {
            current_operation = item.op3;
            current_operation_correct = item.ans3;
        }
        else if (digit_nr == 3) {
            current_operation = item.op4;
            current_operation_correct = item.ans4;
        }
        else if (digit_nr == 4) {
            current_operation = item.op5;
            current_operation_correct = item.ans5;
        }
        else if (digit_nr == 5) {
            current_operation = item.op6;
            current_operation_correct = item.ans6;
        }
        else if (digit_nr == 6) {
            current_operation = item.op7;
            current_operation_correct = item.ans7;
        }
        else if (digit_nr == 7) {
            current_operation = item.op8;
            current_operation_correct = item.ans8;
        }
        else if (digit_nr == 8) {
            current_operation = item.op9;
            current_operation_correct = item.ans9;
        }
        else if (digit_nr == 9) {
            current_operation = item.op10;
            current_operation_correct = item.ans10;
        }
        else {
            // Apparently the task is to easy.
            current_operation = "-inf + inf = 0";
            current_operation_correct = false;
            print_error("The task is currently not build for n = 10\n");
        }
    }

    on_event:init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

    on_event:key_press()
    {
        if (input_key == KEY_Shift_L)
            operation_response.process_hit(true, event_time);
        else if (input_key == KEY_Shift_R)
            operation_response.process_hit(false, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height  = 0;     // 0 means as large as possible
        }

        CanvasGadget canvas 
        {
            on_event:init()
            {
                fill_pattern_color  = TEST_PAGE_STIMULUS_COLOR;
                size                = 600, 100;
                offset_x            = width/2;
                offset_y            = height/2;
            }

            TextShape tshape
            {
                on_event:init()
                {
                    font_family         = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size           = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color  = TEST_PAGE_STIMULUS_TEXT_COLOR;
                }
            }

            void action(time t, string stim_text)
            {
                tshape.text = stim_text;
                tshape.offset_x = -tshape.string_width(stim_text, true)/2;
                tshape.offset_y = -tshape.string_height(stim_text, true)/2;
                tshape.start(t);
            }

            void cleanup()
            {
                tshape.abort();
                canvas.full_abort();
                tshape.is_visible = false;
            }
        }

		SoundChain stimulus_audio
		{
			 // Sound source/producer object.
			SoundFile clip {}
			// Sound sink/consumer object.
			SoundPlayback playback {}

            time play(time t, string digit)
            {
				string sndfn = digit + ".wav";
				stimulus_audio.clip.file = stimuli_dir() + "sounds/" +  sndfn;
				stimulus_audio.playback.device = sound_output_device;
				stimulus_audio.start();
                return stimulus_audio.expected_start_time;
            }
		}

		time start_stimuli(time tref)
        {
            // Start stimulus.
            //TODO change "1".
            string num = current_digits[digit_nr];
            get_operation();
            time onset  = stimulus_audio.play(tref, num);
            time offset = stimulus_audio.expected_finish_time;
            canvas.action(offset, current_operation);
            operation_response.start_response(
                digit_nr,
                current_operation_correct,
                canvas.tshape.expected_start_time
                );

            digit_nr++;

            // Return stimulus offset time.
            return onset;
        }

        TextFieldGadget input
        {
            init()
            {
                font_family = TEST_PAGE_INPUT_FONT_FAMILY;
                font_size = TEST_PAGE_INPUT_FONT_SIZE;
                fill_pattern_color = TEST_PAGE_INPUT_COLOR;
                text_color = TEST_PAGE_INPUT_TEXT_COLOR;
                width_en = 20;
                is_visible = false;
            }

            on_event:change()
            {
                string output = "";
                char c;
                int i;
                while (i < length(text) ) {
                    c = character(text, i);
                    if (c >= '0' && c <= '9')
                        output += c;
                    i++;
                }
                text = output;
            }

            on_event:enter()
            {
                // Only accept when characters have been entered.
                if (text != "")
                    recall_response.process_hit(text, event_time);
            }
        }

        HorizontalLayout buttons
        {
            init()
            {
                spacing = 5;
                is_visible = false;
            }

            ButtonGadget button1
            {
                init()
                {
                    text = "1";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "1");
                }
            }

            ButtonGadget button2
            {
                init()
                {
                    text = "2";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "2");
                }
            }

            ButtonGadget button3
            {
                init()
                {
                    text = "3";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "3");
                }
            }

            ButtonGadget button4
            {
                init()
                {
                    text = "4";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "4");
                }
            }

            ButtonGadget button5
            {
                init()
                {
                    text = "5";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "5");
                }
            }

            ButtonGadget button6
            {
                init()
                {
                    text = "6";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "6");
                }
            }

            ButtonGadget button7
            {
                init()
                {
                    text = "7";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "7");
                }
            }

            ButtonGadget button8
            {
                init()
                {
                    text = "8";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "8");
                }
            }

            ButtonGadget button9
            {
                init()
                {
                    text = "9";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "9");
                }
            }

            ButtonGadget button0
            {
                init()
                {
                    text = "0";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    input.set_text(input.text + "0");
                }
            }

            ButtonGadget button_bs
            {
                init()
                {
                    text = "BACKSPACE";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 180, 75;
                }


                on_event:activate()
                {
                    input.set_text(substring(input.text, 0, length(input.text) - 1));
                }
            }

            ButtonGadget button_enter
            {
                init()
                {
                    text = "OK";
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 75, 75;
                }


                on_event:activate()
                {
                    if (text != "")
                        recall_response.process_hit(input.text, event_time);
                }
            }
        }
        
        HorizontalLayout buttons_tf
        {
            init()
            {
                spacing = 100;
                is_visible = false;
                options = LAYOUT_EQUAL_WIDTH;
            }

            ButtonGadget button_true
            {
                init()
                {
                    text = TRUE_BUTTON_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }

                on_event:activate()
                {
                    if (text != "")
                        operation_response.process_hit(true, event_time);
                }
            }
            
            ButtonGadget button_false
            {
                init()
                {
                    text = FALSE_BUTTON_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }

                on_event:activate()
                {
                    if (text != "")
                        operation_response.process_hit(false, event_time);
                }
            }

            void show()
            {
                button_true.is_visible = true;
                button_false.is_visible = true;
                is_visible = true;
            }

            void hide()
            {
                button_true.is_visible = false;
                button_false.is_visible = false;
                is_visible = false;
            }
        }

        void reset()
        {
            full_abort();
            canvas.cleanup();
            buttons.is_visible = false;
            buttons_tf.hide();

            input.text = "";
        }
    }

    Response operation_response
    {
        bool correct_value;
        bool response;
        bool correct;
        int  op_nr;
        int  rt;
        int  op1;
        int  op2;
        int  op3;
        int  op4;
        int  op5;
        int  op6;
        int  op7;
        int  op8;
        int  op9;
        int  op10;

        void clear()
        {
            rt      = -9999;
            correct = false;
            correct_value = false;
            op_nr   = -1;
            op1     = -1;
            op3     = -1;
            op3     = -1;
            op4     = -1;
            op5     = -1;
            op6     = -1;
            op7     = -1;
            op8     = -1;
            op9     = -1;
            op10    = -1;
        }

        int correctness()
        {
            int c = 0;
            if (correct)
                c = 1;
            return c;
        }

        // The response values reflects whether the participant thought
        // the answer was correct.
        void process_hit(bool response, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                rt = int(reaction_time(0));
                correct = (correct_value == response);

                ignore_remaining_hits();

                stop();

                if (op_nr == 0)
                    op1 = correctness();
                else if (op_nr == 1)
                    op2 = correctness();
                else if (op_nr == 2)
                    op3 = correctness();
                else if (op_nr == 3)
                    op4 = correctness();
                else if (op_nr == 4)
                    op5 = correctness();
                else if (op_nr == 5)
                    op6 = correctness();
                else if (op_nr == 6)
                    op7 = correctness();
                else if (op_nr == 7)
                    op8 = correctness();
                else if (op_nr == 8)
                    op9 = correctness();
                else if (op_nr == 9)
                    op10 = correctness();
                else {
                    print_error(
                        "Oops op_nr only valid for 0 <= op_nr < 10 " 
                        );
                }

            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }

        on_event:start()
        {
            layout.buttons_tf.show();
        }

        on_event:finish()
        {
            layout.reset();
            if (digit_nr < item.n)
                // maybe use an ISI instead...
                layout.start_stimuli(event_time + INTER_STIMULUS_INTERVAL);
            else
                recall_response.start_response(
                    presented_digits(),
                    event_time + INTER_STIMULUS_INTERVAL
                    );
        }

        void start_response(int op_num, bool correct, time t, dur d=0s)
        {
            op_nr = op_num;
            correct_value = correct;
            start(t, d);
        }
    }

    Response recall_response
    {
        // Response data.
        string  entered_value;
        string  desired_value;
        int     rt;
        int     correct;

        void clear()
        {
            entered_value   = "";
            desired_value   = "just something clearly invalid";
            rt              = -9999;
            correct         = false;
        }

        void process_hit(string val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (is_valid_value(val) && validity == HIT_VALID)
            {
                entered_value   = val;
                rt              = int(reaction_time(0));
                correct         = entered_value == desired_value;

                ignore_remaining_hits();

                stop();
            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }

        // Checks if the answer contains one or more digits.
        bool is_valid_value(string s)
        {
            int slen = length(s);
            int n;
            while (n < slen)
            {
                char c = character(s, n);
                if (c >= '0' && c <= '9')
                    return true;

                n++;
            }

            return false;
        }

        on_event:start()
        {
            layout.input.is_visible     = true;
            layout.buttons.is_visible   = true;
        }

        on_event:finish()
        {
            layout.input.is_visible     = false;
            layout.buttons.is_visible   = false;
            real correctness = correct ? 1.0 : -1.0;
            test_page_overlay.start_feedback(correctness, FEEDBACK_DUR);
            done(CONTINUE);
        }

        void start_response(string desired, time t, dur d = 0s) 
        {
            desired_value = desired;
            start(t, d);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(
        int ntrials = -1,
        bool fb = false,
        bool pr = false,
        string overlay_text = "type in digits in given order"
        )
    {
        test_page_overlay.setup(this);
        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
             overlay_text : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save passed trial control parameters.
        item        = it;

        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTER_TRIAL_INTERVAL);

        // Reset response data.
        recall_response.clear();
        operation_response.clear();

        // Prepares the numbers for the current trial
        prepare_digits();

        // Start stimulus.Layout
        time stimoffset = layout.start_stimuli(tref);

        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);

        // Update status line on control window. Cleared in done() above.
        control.set_status(string(count));

        // Remember who to signal when the trial is over.
        target = caller;
    }
}
